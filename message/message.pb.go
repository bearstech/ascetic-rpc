// Code generated by protoc-gen-go.
// source: message/message.proto
// DO NOT EDIT!

/*
Package message is a generated protocol buffer package.

It is generated from these files:
	message/message.proto
	message/test.proto

It has these top-level messages:
	Request
	Response
	Chunk
	Error
	Hello
	World
*/
package message

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ErrorType int32

const (
	Error_APPLICATION   ErrorType = 0
	Error_SERIALIZATION ErrorType = 1
	Error_PROTOCOL      ErrorType = 2
	Error_NETWORK       ErrorType = 3
	Error_SERVER_PANIC  ErrorType = 4
	Error_TIMEOUT       ErrorType = 5
	Error_BAD_METHOD    ErrorType = 6
)

var ErrorType_name = map[int32]string{
	0: "APPLICATION",
	1: "SERIALIZATION",
	2: "PROTOCOL",
	3: "NETWORK",
	4: "SERVER_PANIC",
	5: "TIMEOUT",
	6: "BAD_METHOD",
}
var ErrorType_value = map[string]int32{
	"APPLICATION":   0,
	"SERIALIZATION": 1,
	"PROTOCOL":      2,
	"NETWORK":       3,
	"SERVER_PANIC":  4,
	"TIMEOUT":       5,
	"BAD_METHOD":    6,
}

func (x ErrorType) String() string {
	return proto.EnumName(ErrorType_name, int32(x))
}
func (ErrorType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3, 0} }

type Request struct {
	Name      string `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Signature string `protobuf:"bytes,2,opt,name=Signature" json:"Signature,omitempty"`
	RawBody   []byte `protobuf:"bytes,3,opt,name=RawBody,proto3" json:"RawBody,omitempty"`
}

func (m *Request) Reset()                    { *m = Request{} }
func (m *Request) String() string            { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()               {}
func (*Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Response struct {
	// Types that are valid to be assigned to Body:
	//	*Response_Error
	//	*Response_RawOK
	//	*Response_Stream
	Body      isResponse_Body `protobuf_oneof:"Body"`
	Signature string          `protobuf:"bytes,3,opt,name=Signature" json:"Signature,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type isResponse_Body interface {
	isResponse_Body()
}

type Response_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=Error,oneof"`
}
type Response_RawOK struct {
	RawOK []byte `protobuf:"bytes,2,opt,name=RawOK,proto3,oneof"`
}
type Response_Stream struct {
	Stream bool `protobuf:"varint,4,opt,name=Stream,oneof"`
}

func (*Response_Error) isResponse_Body()  {}
func (*Response_RawOK) isResponse_Body()  {}
func (*Response_Stream) isResponse_Body() {}

func (m *Response) GetBody() isResponse_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Response) GetError() *Error {
	if x, ok := m.GetBody().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Response) GetRawOK() []byte {
	if x, ok := m.GetBody().(*Response_RawOK); ok {
		return x.RawOK
	}
	return nil
}

func (m *Response) GetStream() bool {
	if x, ok := m.GetBody().(*Response_Stream); ok {
		return x.Stream
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Response) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Response_OneofMarshaler, _Response_OneofUnmarshaler, _Response_OneofSizer, []interface{}{
		(*Response_Error)(nil),
		(*Response_RawOK)(nil),
		(*Response_Stream)(nil),
	}
}

func _Response_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Response)
	// Body
	switch x := m.Body.(type) {
	case *Response_Error:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Response_RawOK:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.RawOK)
	case *Response_Stream:
		t := uint64(0)
		if x.Stream {
			t = 1
		}
		b.EncodeVarint(4<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Response.Body has unexpected type %T", x)
	}
	return nil
}

func _Response_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Response)
	switch tag {
	case 1: // Body.Error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Body = &Response_Error{msg}
		return true, err
	case 2: // Body.RawOK
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Body = &Response_RawOK{x}
		return true, err
	case 4: // Body.Stream
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Body = &Response_Stream{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Response_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Response)
	// Body
	switch x := m.Body.(type) {
	case *Response_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Response_RawOK:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RawOK)))
		n += len(x.RawOK)
	case *Response_Stream:
		n += proto.SizeVarint(4<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Chunk struct {
	// Types that are valid to be assigned to Body:
	//	*Chunk_Error
	//	*Chunk_RawOK
	//	*Chunk_EOF
	Body isChunk_Body `protobuf_oneof:"Body"`
}

func (m *Chunk) Reset()                    { *m = Chunk{} }
func (m *Chunk) String() string            { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()               {}
func (*Chunk) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isChunk_Body interface {
	isChunk_Body()
}

type Chunk_Error struct {
	Error *Error `protobuf:"bytes,1,opt,name=Error,oneof"`
}
type Chunk_RawOK struct {
	RawOK []byte `protobuf:"bytes,2,opt,name=RawOK,proto3,oneof"`
}
type Chunk_EOF struct {
	EOF bool `protobuf:"varint,3,opt,name=EOF,oneof"`
}

func (*Chunk_Error) isChunk_Body() {}
func (*Chunk_RawOK) isChunk_Body() {}
func (*Chunk_EOF) isChunk_Body()   {}

func (m *Chunk) GetBody() isChunk_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *Chunk) GetError() *Error {
	if x, ok := m.GetBody().(*Chunk_Error); ok {
		return x.Error
	}
	return nil
}

func (m *Chunk) GetRawOK() []byte {
	if x, ok := m.GetBody().(*Chunk_RawOK); ok {
		return x.RawOK
	}
	return nil
}

func (m *Chunk) GetEOF() bool {
	if x, ok := m.GetBody().(*Chunk_EOF); ok {
		return x.EOF
	}
	return false
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Chunk) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Chunk_OneofMarshaler, _Chunk_OneofUnmarshaler, _Chunk_OneofSizer, []interface{}{
		(*Chunk_Error)(nil),
		(*Chunk_RawOK)(nil),
		(*Chunk_EOF)(nil),
	}
}

func _Chunk_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Chunk)
	// Body
	switch x := m.Body.(type) {
	case *Chunk_Error:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Error); err != nil {
			return err
		}
	case *Chunk_RawOK:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.RawOK)
	case *Chunk_EOF:
		t := uint64(0)
		if x.EOF {
			t = 1
		}
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(t)
	case nil:
	default:
		return fmt.Errorf("Chunk.Body has unexpected type %T", x)
	}
	return nil
}

func _Chunk_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Chunk)
	switch tag {
	case 1: // Body.Error
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Error)
		err := b.DecodeMessage(msg)
		m.Body = &Chunk_Error{msg}
		return true, err
	case 2: // Body.RawOK
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Body = &Chunk_RawOK{x}
		return true, err
	case 3: // Body.EOF
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Body = &Chunk_EOF{x != 0}
		return true, err
	default:
		return false, nil
	}
}

func _Chunk_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Chunk)
	// Body
	switch x := m.Body.(type) {
	case *Chunk_Error:
		s := proto.Size(x.Error)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Chunk_RawOK:
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.RawOK)))
		n += len(x.RawOK)
	case *Chunk_EOF:
		n += proto.SizeVarint(3<<3 | proto.WireVarint)
		n += 1
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type Error struct {
	Message string    `protobuf:"bytes,1,opt,name=Message" json:"Message,omitempty"`
	Type    ErrorType `protobuf:"varint,2,opt,name=Type,enum=message.ErrorType" json:"Type,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func init() {
	proto.RegisterType((*Request)(nil), "message.Request")
	proto.RegisterType((*Response)(nil), "message.Response")
	proto.RegisterType((*Chunk)(nil), "message.Chunk")
	proto.RegisterType((*Error)(nil), "message.Error")
	proto.RegisterEnum("message.ErrorType", ErrorType_name, ErrorType_value)
}

func init() { proto.RegisterFile("message/message.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 352 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x92, 0xcf, 0x4e, 0xea, 0x40,
	0x14, 0xc6, 0x29, 0xfd, 0x03, 0x1c, 0x7a, 0xb9, 0xbd, 0xe7, 0x46, 0xd3, 0x85, 0x0b, 0xc3, 0x42,
	0x5d, 0x61, 0x82, 0x4f, 0x50, 0xca, 0x18, 0x1a, 0xa0, 0xd3, 0x0c, 0x83, 0x26, 0x6e, 0x48, 0xd5,
	0x09, 0x1a, 0x03, 0xc5, 0xb6, 0xc4, 0xf0, 0x0a, 0x3e, 0x95, 0x8f, 0xe6, 0x74, 0x5a, 0x34, 0xb8,
	0x75, 0xd5, 0x7e, 0xdf, 0x6f, 0xe6, 0x7c, 0x5f, 0x4e, 0x06, 0x8e, 0x56, 0x22, 0xcb, 0xe2, 0xa5,
	0xb8, 0xac, 0xbe, 0xbd, 0x4d, 0x9a, 0xe4, 0x09, 0x36, 0x2a, 0xd9, 0x9d, 0x43, 0x83, 0x89, 0xd7,
	0xad, 0xc8, 0x72, 0x44, 0x30, 0xc2, 0x78, 0x25, 0x5c, 0xed, 0x54, 0xbb, 0x68, 0x31, 0xf5, 0x8f,
	0x27, 0xd0, 0x9a, 0x3d, 0x2f, 0xd7, 0x71, 0xbe, 0x4d, 0x85, 0x5b, 0x57, 0xe0, 0xdb, 0x40, 0x57,
	0x5e, 0x8e, 0xdf, 0x06, 0xc9, 0xe3, 0xce, 0xd5, 0x25, 0xb3, 0xd9, 0x5e, 0x76, 0xdf, 0x35, 0x68,
	0x32, 0x91, 0x6d, 0x92, 0x75, 0x26, 0xf0, 0x0c, 0x4c, 0x92, 0xa6, 0x49, 0xaa, 0x26, 0xb7, 0xfb,
	0x9d, 0xde, 0xbe, 0x8b, 0x72, 0x47, 0x35, 0x56, 0x62, 0x3c, 0x06, 0x53, 0xde, 0xa7, 0x63, 0x15,
	0x64, 0x17, 0xbe, 0x92, 0x32, 0xc6, 0x9a, 0xe5, 0xa9, 0x88, 0x57, 0xae, 0x21, 0x41, 0x53, 0x82,
	0x4a, 0x1f, 0xd6, 0xd3, 0x7f, 0xd4, 0x1b, 0x58, 0x60, 0xa8, 0x32, 0x0f, 0x60, 0xfa, 0x4f, 0xdb,
	0xf5, 0xcb, 0xaf, 0x8b, 0x20, 0xe8, 0x84, 0x5e, 0xab, 0xa0, 0xa2, 0x45, 0x21, 0xbe, 0x42, 0x3e,
	0xb4, 0x6a, 0x78, 0xb1, 0x95, 0x69, 0x39, 0xb7, 0x5a, 0xe5, 0x5e, 0xe2, 0x39, 0x18, 0x7c, 0xb7,
	0x29, 0x17, 0xd9, 0xe9, 0xff, 0x3f, 0x8c, 0xef, 0xe5, 0x12, 0x31, 0x75, 0xa0, 0x9b, 0x83, 0x51,
	0x28, 0xfc, 0x0b, 0x6d, 0x2f, 0x8a, 0x26, 0x81, 0xef, 0xf1, 0x80, 0x86, 0x4e, 0x0d, 0xff, 0xc1,
	0x9f, 0x19, 0x61, 0x81, 0x37, 0x09, 0xee, 0x4a, 0x4b, 0x43, 0x1b, 0x9a, 0x11, 0xa3, 0x9c, 0xfa,
	0x74, 0xe2, 0xd4, 0xb1, 0x0d, 0x8d, 0x90, 0xf0, 0x5b, 0xca, 0xc6, 0x8e, 0x8e, 0x0e, 0xd8, 0xf2,
	0xf4, 0x0d, 0x61, 0x8b, 0xc8, 0x0b, 0x03, 0xdf, 0x31, 0x0a, 0xcc, 0x83, 0x29, 0xa1, 0x73, 0xee,
	0x98, 0xd8, 0x01, 0x18, 0x78, 0xc3, 0xc5, 0x94, 0xf0, 0x11, 0x1d, 0x3a, 0xd6, 0xbd, 0xa5, 0xde,
	0xc6, 0xd5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x48, 0xec, 0xe1, 0x92, 0x34, 0x02, 0x00, 0x00,
}
